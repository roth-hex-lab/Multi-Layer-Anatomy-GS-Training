Submodule submodules/diff-gaussian-rasterization contains modified content
diff --git a/submodules/diff-gaussian-rasterization/cuda_rasterizer/auxiliary.h b/submodules/diff-gaussian-rasterization/cuda_rasterizer/auxiliary.h
index aaf2191..60b55a0 100644
--- a/submodules/diff-gaussian-rasterization/cuda_rasterizer/auxiliary.h
+++ b/submodules/diff-gaussian-rasterization/cuda_rasterizer/auxiliary.h
@@ -163,7 +163,7 @@ __forceinline__ __device__ bool in_frustum(int idx,
 	float3 p_proj = { p_hom.x * p_w, p_hom.y * p_w, p_hom.z * p_w };
 	p_view = transformPoint4x3(p_orig, viewmatrix);
 
-	if (p_view.z <= 0.2f)// || ((p_proj.x < -1.3 || p_proj.x > 1.3 || p_proj.y < -1.3 || p_proj.y > 1.3)))
+	if (p_view.z <= 0.005f)// || ((p_proj.x < -1.3 || p_proj.x > 1.3 || p_proj.y < -1.3 || p_proj.y > 1.3)))
 	{
 		if (prefiltered)
 		{
diff --git a/submodules/diff-gaussian-rasterization/diff_gaussian_rasterization/__init__.py b/submodules/diff-gaussian-rasterization/diff_gaussian_rasterization/__init__.py
index 7f228ce..5b6ab84 100644
--- a/submodules/diff-gaussian-rasterization/diff_gaussian_rasterization/__init__.py
+++ b/submodules/diff-gaussian-rasterization/diff_gaussian_rasterization/__init__.py
@@ -87,10 +87,23 @@ class _RasterizeGaussians(torch.autograd.Function):
         ctx.raster_settings = raster_settings
         ctx.num_rendered = num_rendered
         ctx.save_for_backward(colors_precomp, means3D, scales, rotations, cov3Ds_precomp, radii, sh, opacities, geomBuffer, binningBuffer, imgBuffer)
-        return color, radii, invdepths
+
+        alignment = 128
+        offset = (alignment - imgBuffer.data_ptr()) % alignment
+        total_size = raster_settings.image_height * raster_settings.image_width * 4
+        accumulation = (
+            imgBuffer[offset: offset + total_size]
+            .view(torch.float32)
+            .clone()
+            .mul_(-1)
+            .add_(1)
+            .view((raster_settings.image_height, raster_settings.image_width))
+            )
+
+        return color, radii, invdepths, accumulation
 
     @staticmethod
-    def backward(ctx, grad_out_color, _, grad_out_depth):
+    def backward(ctx, grad_out_color, _, grad_out_depth, *args):
 
         # Restore necessary values from context
         num_rendered = ctx.num_rendered
